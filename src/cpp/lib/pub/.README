##############################################################################
##
##       Copyright (C) 2018-2023 Frank Eskesen.
##
##       This file is free content, distributed under the MIT license.
##       (See accompanying file LICENSE.MIT or the original contained
##       within https://opensource.org/licenses/MIT)
##
##############################################################################
##
## Title-
##       ~/src/cpp/lib/pub/.README
##
## Purpose-
##       Development status, history, and reminders.
##
## Last change date-
##       2023/05/25
##
##############################################################################

##############################################################################
## STATUS:
2023/05/25 Dispatch.cpp issue #2 test fix implemented
         This problem occured when ../dev/Test/T_Stream.cpp runs a stress test.
         Testing issues remain: the FC_UNDEF request does not complete. That
         means that dispatch::Task destructors don't complete and therefore
         Client and Server destructors don't complete. This needs a-fixin'.

##############################################################################
## FEATURES:

##############################################################################
## BUGS:
2022/10/16 Test/TestDisp throughput regression ** IMPORTANT **
         Appears to be due to kernel changes slowing down some task switching.
         This impacts all DispatchTask users.

2020/08/22 BlockAllocator needs performance review.
         (Linux malloc/free somehow *BEATS* BlockAllocator's performance.)

##############################################################################
## DONE:
2023/04/05 Stable. No significant changes.
         However, Test/TestDisp.cpp Linux timings have significantly improved.
         Conjecture: Linux kernel/library fixes improved multithreading
         performance.

2022/12/18 Stable
         However, Select.cpp and Socket.cpp probably need more work.
         While no known multithreading timing holes exist, associated fixes
         have significantly reduced dev library throughput.

2022/10/16 Added Diagnostic.h, for tracking hard to debug problems.

2019/03/15 See ~/src/cpp/HTTP/.README for additional information.

##############################################################################
## TODO:
2022/08/23 Implement CLANG compiler compilation
         ~/src/cpp/ctl/BSD/Makefile has some (untested) code already.

2018/09/16 Create cascade delete test.
         ../obj/Ref jumps through hoops to avoid this.
         Why isn't this necessary in std::smart_ptr?

2018/09/16 Create atomic_shared_ptr, ..., ?? make_atomic ??
         Using boost until implemented properly.

2018/09/16 Complete test/utf8.sh
         Not tested:
           "past end" Exceptions
           Methods bs(), fs(), and synch()

##############################################################################
## FIXED:
2023/04/24 Corrected a possible timing bug in Select.cpp

2022/12/18 Select.cpp, Socket.cpp
         All known timing holes have been corrected. Select invokes
         Socket::do_select with its shr_latch held.

2022/12/18 Utility.cpp
         Method dump didn't always properly handle misaligned address.
         (Too many ~~~~s at the beginning, to few at the end of the dump)
         (This was fixed much earlier but not removed from the BUGS list.)

2022/11/27 Dispatch.cpp improved
         Task destructor now insures all Task list items have been processed,
         fixing a possible user use after delete error.

2022/11/17 Socket.cpp
         Sockaddr_u's copy constructor Needed to initialize the sockaddr_u in
         its copy constructor before invoking operator=.

2020/01/07 Debug.cpp
         It's possible for the debug object to change between Debug::get()
         and the time that the object is used. The debug lock is required
         for all methods that use get().

2019/03/15 Socket.cpp
         SampleSSL.cpp Error handling for unusable socket gets a segment
         exception in Cygwin but not in Linux. (Bug in gcc 7.4.0, not 8.3.1)

         ~/src/cpp/inc/pub/utility/to_string.h: had subroutines
         static inline std::string to_string(const char*, ...) {} and
         static inline std::string to_string(const char*, va_list) {}
         The va_list method is called if there is a single char* parameter,
         causing a segment exception when it is used.

##############################################################################
## CHANGED:
2022/12/10 Select.cpp
         Method tickle() [which was shutdown()] renamed again to flush().

2022/11/17 Thread.cpp simplified
         Now uses thread local storage rather than a map to maintain current
         Thread information. However, static_debug can no longer display the
         Thread list. (There isn't one.)

2022/11/17 Select.cpp
         No operations except shutdown() directly invoke control().

##############################################################################
## CLOSED: 2018/12/29 CYGWIN BUG
         This does not occur in Linux. Closed: CYGWIN's problem.

2018/12/29 CYGWIN ONLY Test_Thr runs (much) better with extra printing
         Test_Thr runs much longer when not printing during QuietThread
         startup. Just using fflush(stdout) HELPS performance, but it's even
         better when printf and fflush are combined.

## CLOSED: 2018/12/29 CYGWIN BUG
         This does not occur in Linux. Closed: CYGWIN's problem.
         In Cygwin, sleeping threads interfere with thread start.
         Timing tests show that thread start occasionally takes about 80x
         longer while other threads are sleeping. This occurs at regular
         intervals, but the intervals become longer as the sleeping threads
         near their wake up time.

2018/12/29 CYGWIN ONLY Test_Thr excessive runtime delay with sleeping threads
         Test_Thr runs much longer when noisy_delay larger.
         This seems to somehow slow down thread creation.
         Does not occur in Linux.

