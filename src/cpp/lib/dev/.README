##############################################################################
##
##       Copyright (C) 2022 Frank Eskesen.
##
##       This file is free content, distributed under the MIT license.
##       (See accompanying file LICENSE.MIT or the original contained
##       within https://opensource.org/licenses/MIT)
##
##############################################################################
##
## Title-
##       .README
##
## Purpose-
##       README: List of usage notes, bugs, fixes, etc.
##
## Last change date-
##       2022/12/12
##
##############################################################################

##############################################################################
## SOCKET INFO: (Generic information)
typedef __uint32_t     in_addr_t;   // netinet/in.h => cygwin/in.h
typedef __uint16_t     in_port_t;   // netinet/in.h => cygwin/in.h

typedef __sa_family_t  sa_family_t; // sys/socket.h
typedef __socklen_t    socklen_t;   // sys/socket.h

#define AF_*; #define PF_*;         // cygwin/socket.h

struct addrinfo {                   // netdb.h
int                    ai_flags;    // input flags
int                    ai_family;   // address family of socket
int                    ai_socktype; // socket type
int                    ai_protocol; // ai_protocol
socklen_t              ai_addrlen;  // length of socket address
char*                  ai_canonname; // canonical name of service location
struct sockaddr*       ai_addr;     // socket address of socket
struct addrinfo*       ai_next;     // pointer to next in list
};

struct hostent {                    // netdb.h
char*                  h_name;      // Official name of host
char**                 h_aliases;   // Alias list
int                    h_addrtype;  // Host address type
int                    h_length;    // Length of address
char**                 h_addr_list; // List of addresses
};

struct in_addr {                    // netinet/in.h => cygwin/in.h
in_addr_t              s_addr;      // Internet address
};

struct in6_addr {                   // netinet/in.h
union {
   int8_t              __s6_addr[16];
   int16_t             __s6_addr16[8];
   int32_t             __s6_addr32[4];
} __u6;
#define s6_addr   __u6.__s6_addr
#define s6_addr16 __u6.__s6_addr16
#define s6_addr32 __u6.__s6_addr32
};

struct linger {                     // sys/socket.h
unsigned short         l_onoff;     // Linger active?
unsigned short         l_linger;    // Linger timeout, in seconds
};

struct pollfd {                     // sys/poll.h
  int fd;
  short events;
  short revents;
};

struct sockaddr {                   // sys/socket.h
sa_family_t            sa_family;   // Address family
char                   sa_data[14];
};

struct sockaddr_in {                // netinet/in.h => cygwin/in.h
sa_family_t            sin_family;  // AF_INET
in_port_t              sin_port;    // Port number
struct in_addr         sin_addr;    // Internet address
char                   __pad[*];
};

struct sockaddr_in6 {               // netinet/in.h => * => cygwin/in6.h
sa_family_t            sin6_family; // AF_INET6
in_port_t              sin6_port;   // Port number
uint32_t               sin6_flowinfo; // Traffic class and flow info
struct in6_addr        sin6_addr;   // IPv6 address
uint32_t               sin6_scope_id; // Set of interfaces for a scope
};

struct sockaddr_storage {           // sys/socket.h
sa_family_t            ss_family;   // Address family
char                   __ss_pad1[*];
int64_t                __ss_align;
char                   __ss_pad2[*];
};

union sockaddr_x {                  // pub/Socket.h (pub::Socket::sockaddr_x)
sa_family_t            x_family;    // Socket address family
uint16_t               _0002[10];   // (Unused)
uint16_t               x_socksize;  // Length(x_sockaddr)
sockaddr*              x_sockaddr;  // Sockaddr copy (possibly this)
};

union sockaddr_u {                  // pub/Socket.h (pub::Socket::sockaddr_u)
uint64_t               su_align[4]; // Alignment and maximum size (32)
sa_family_t            su_af;       // Socket address family
sockaddr               sa;          // Socket address
sockaddr_in            su_i4;       // IPv4 internet address
sockaddr_in6           su_i6;       // IPv6 internet address
sockaddr_x             su_x;        // Extended sockaddr format

std::string to_string( void ) const; // Convert to display string
}; // union sockaddr_u

##############################################################################
## STATUS: (Current status; Significant checkpoints)
2022/12/10 Asychronous Client/Server I/O working well.
           Timing exposures still exist. Some redesign is needed.
2022/10/23 Asychronous Client/Server I/O working, but with known bugs.
2022/10/15 Asychronous Client I/O working. Server Client I/O is synchronous.
2022/09/25 Asychronous Client I/O working (with one client)
2022/08/31 PROTOCOL1A (since renamed to HTTP1) working with updated Socket.
2022/07/22 PROTOCOL1B (since renamed to PROTOCOL1A) working.
2022/07/16 Moved source into distribution library.
2022/06/18 Resumed active development
           ~/src/cpp/lib/pub/Test/TestSock.cpp working
2021/11/01 Deferred: building ~/src/cpp/lib/pub/Test/TestSock.cpp to learn
           more about SSL sockets and sockets in general.
2021/11/01 Started

##############################################################################
## BUGS: (Open bugs)
2022/12/12 Known timing issue (Server.cpp, Client.cpp, Listen.cpp)
         pub/Select.cpp must call pub/Socket::do_select without any lock
         held since Server.cpp can call Socket::close which then calls
         Select::remove and Select::flush which then gets Select's xcl_latch.
         This is fragile since another Socket::close may already be pending,
         and the Socket possibly be deleted.
         While it *might* work today as long as the Socket is no longer
         referenced, it might not work tomorrow.

2022/12/12 Listen.cpp
         Running T_Stream --server --stress --major=1 --runtime=30, Listen's
         accept fails with errno indicating "Too many open sockets".

2022/12/12 Performance issue
         Throughput is pathetic running T_Stream --server --stress --major=1.

2022/10/24 Cygwin performance issue:
         Cygwin stress test works best with --stress=1 (one client.)
         When more than one client is used, throughput decreases.

##############################################################################
## FIXED: (Fixed bugs)
2022/12/12 No longer occurs
2022/10/24 Linux stress test completes but doesn't terminate properly
         when more than ~10 client threads are used.

2022/12/12 No longer occurs
2022/10/24 Intermittent termination error: "609 S/Select.cpp Should not
         occur (but did)". The associated debug shows a closed socket
         handle still active in the pollfd and sarray tables.

2022/11/17 Fix commited
2022/10/23 Ioda operator+=(Ioda&&) inserted at head rather than at tail
         TODO: Maybe make that operator-=(string&), since that might've been
         used instead in ServerResponse::write(). (Use all operator -='s)

2022/10/24 Fixed using Server polling
2022/10/16 Linux throughput performance is pathetic.
         It wasn't so much polling that fixed the problem, it was the extra
         threading used in the Server.

##############################################################################
## CLOSED: (Bugs closed without fixing)
2022/10/24 (None)

##############################################################################
## TODO: (Deferred)
2022/02/16 TODO? Don't wait for content-length
2022/02/16 TODO? Allow next HTTP1 write before response

           TODO? Move connect logic outside of Client.
                 Pass resulting connection to Client constructor.

2022/10/24 Need to stress test Select more. Maybe we should create a new
         Client/Server for each ClientStream. (Must consider async.)

##############################################################################
## DONE:
2022/10/24 Rename ServerAgent to ListenAgent
         Server, ServerRequest/Response keep their current names

##############################################################################
## FEATURE: (Ideas for improvement)
2022/10/24 Support HTTP/2 (First w/o encryption)

